<?php

namespace App\Tests\Application;

use App\Domain\Building\BuildingEntity;
use App\Domain\Building\BuildingRepositoryException;
use App\Domain\Building\BuildingRepositoryInterface;
use App\Domain\Building\ValueObject\BuildingId;
use App\Domain\Company\CompanyEntity;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Company\CompanyRepositoryInterface;
use App\Domain\Company\ValueObject\CompanyId;
use App\Domain\Floor\FloorEntity;
use App\Domain\Floor\FloorRepositoryException;
use App\Domain\Floor\FloorRepositoryInterface;
use App\Domain\Floor\ValueObject\FloorId;
use App\Domain\Site\SiteEntity;
use App\Domain\Site\SiteRepositoryException;
use App\Domain\Site\SiteRepositoryInterface;
use App\Domain\Site\ValueObject\SiteId;
use Exception;
use LogicException;
use PHPUnit\Framework\ExpectationFailedException;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\BrowserKit\AbstractBrowser;
use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

/**
 * @internal
 *
 * @coversNothing
 */
class ApplicationTestCase extends WebTestCase
{
    protected AbstractBrowser $client;
    protected UrlGeneratorInterface $router;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::bootKernel();
    }

    /**
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     * @throws LogicException
     */
    protected function stUp(): void
    {
        /** @var ?AbstractBrowser $client */
        $client = self::getContainer()->get('test.client');
        $browser = self::getClient($client);
        if (is_null($browser)) {
            throw new LogicException('No browser found');
        }
        $this->client = $browser;

        /** @var UrlGeneratorInterface $router */
        $router = self::getContainer()->get(UrlGeneratorInterface::class);
        $this->router = $router;
    }

    /**
     * @param array<string, mixed> $routeParameters
     * @param array<string, mixed> $newData         The data to add to the form
     * @param array<string, mixed> $oldData         The data that should be present in the form already
     *
     * @throws ExpectationFailedException
     */
    protected function checkForm(
        string $route,
        array $routeParameters,
        string $formName,
        array $newData,
        array $oldData = []
    ): void {
        try {
            $response = $this->client->request('GET', $this->router->generate($route, $routeParameters));
            self::assertResponseIsSuccessful();

            $form = $response->filterXPath("//form[@name='{$formName}']")->form();
            $originalFormValues = $form->getValues();
            foreach ($oldData as $oldDataKey => $oldDataValue) {
                self::assertEquals($oldDataValue, $originalFormValues[$oldDataKey]);
            }
            $form->setValues($newData);
            $this->client->submit($form);
        } catch (Exception $e) {
            throw new ExpectationFailedException('Something went wrong', previous: $e);
        }
    }

    /**
     * Create a Company.
     *
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     * @throws CompanyRepositoryException
     */
    protected static function createCompany(): CompanyId
    {
        /** @var CompanyRepositoryInterface $companyRepository */
        $companyRepository = self::getContainer()->get(CompanyRepositoryInterface::class);
        $company = new CompanyEntity(
            id: $companyRepository->generateId(),
            name: 'Test Company',
            description: 'Test Company',
            prefix: static::class.time()
        );

        return $companyRepository->store($company);
    }

    /**
     * @throws CompanyRepositoryException
     * @throws SiteRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    protected static function createSite(): SiteId
    {
        $companyId = self::createCompany();

        /** @var SiteRepositoryInterface $siteRepository */
        $siteRepository = self::getContainer()->get(SiteRepositoryInterface::class);
        $site = new SiteEntity(
            id: $siteRepository->generateId(),
            name: 'Test Site',
            description: 'Test Site',
            companyId: $companyId
        );

        return $siteRepository->store($site);
    }

    /**
     * @throws CompanyRepositoryException
     * @throws SiteRepositoryException
     * @throws BuildingRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    protected static function createBuilding(): BuildingId
    {
        $siteId = self::createSite();

        /** @var BuildingRepositoryInterface $buildingRepository */
        $buildingRepository = self::getContainer()->get(BuildingRepositoryInterface::class);
        $building = new BuildingEntity(
            id: $buildingRepository->generateId(),
            name: 'Test Building',
            description: 'Test Building',
            siteId: $siteId,
        );

        return $buildingRepository->store($building);
    }

    /**
     * @throws BuildingRepositoryException
     * @throws CompanyRepositoryException
     * @throws FloorRepositoryException
     * @throws SiteRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    protected static function createFloor(): FloorId
    {
        $buildingId = self::createBuilding();

        /** @var FloorRepositoryInterface $floorRepository */
        $floorRepository = self::getContainer()->get(FloorRepositoryInterface::class);
        $floor = new FloorEntity(
            id: $floorRepository->generateId(),
            name: 'Test Floor',
            description: 'Test Floor',
            buildingId: $buildingId
        );

        return $floorRepository->store($floor);
    }
}
