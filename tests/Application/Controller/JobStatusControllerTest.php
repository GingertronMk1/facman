<?php

namespace App\Tests\Application\Controller;

use App\Application\JobStatus\JobStatusFinderInterface;
use App\Application\JobStatus\JobStatusModel;
use App\Domain\JobStatus\JobStatusEntity;
use App\Domain\JobStatus\JobStatusRepositoryInterface;
use App\Tests\Application\ApplicationTestCase;
use PHPUnit\Framework\Attributes\Test;

/**
 * @internal
 */
final class JobStatusControllerTest extends ApplicationTestCase
{
    private JobStatusFinderInterface $finder;
    private JobStatusRepositoryInterface $repository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->finder = $this->getContainer()->get(JobStatusFinderInterface::class);
        $this->repository = $this->getContainer()->get(JobStatusRepositoryInterface::class);
    }

    #[Test]
    public function testIndex(): void
    {
        $crawler = $this->client->request(
            'GET',
            $this->router->generate('job-status.index')
        );

        $this->assertResponseIsSuccessful();
    }

    #[Test]
    public function testCreate(): void
    {
        $this->checkForm(
            $this->router->generate('job-status.create'),
            'create_job_status_form',
            [
                'create_job_status_form[name]' => self::class,
                'create_job_status_form[description]' => 'Test JobStatus',
                'create_job_status_form[colour]' => '#FF0000',
            ]
        );
        $this->assertResponseRedirects();

        $allStatuses = $this->finder->all();
        $this->assertContains(
            self::class,
            array_map(
                fn (JobStatusModel $jsm) => $jsm->name,
                $allStatuses
            )
        );
    }

    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test JobStatus';
        $originalDescription = 'a description';
        $job_status = new JobStatusEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            colour: '#BADA55'
        );
        $this->repository->store($job_status);

        $newName = 'Update Test JobStatus Again';
        $newDescription = 'Changed';

        $this->checkForm(
            $this->router->generate('job-status.update', ['id' => $id]),
            'update_job_status_form',
            [
                'update_job_status_form[name]' => $newName,
                'update_job_status_form[description]' => $newDescription,
            ],
            [
                'update_job_status_form[name]' => $originalName,
                'update_job_status_form[description]' => $originalDescription,
            ]
        );
        $this->assertResponseRedirects();

        $job_status = $this->finder->findById($id);
        $this->assertEquals($newName, $job_status->name);
        $this->assertEquals($newDescription, $job_status->description);
    }
}
