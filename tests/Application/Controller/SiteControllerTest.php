<?php

namespace App\Tests\Application\Controller;

use App\Application\Site\SiteFinderException;
use App\Application\Site\SiteFinderInterface;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Company\ValueObject\CompanyId;
use App\Domain\Site\SiteEntity;
use App\Domain\Site\SiteRepositoryException;
use App\Domain\Site\SiteRepositoryInterface;
use App\Tests\Application\ApplicationTestCase;
use InvalidArgumentException;
use LogicException;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\ExpectationFailedException;
use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\Routing\Exception\InvalidParameterException;
use Symfony\Component\Routing\Exception\MissingMandatoryParametersException;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * @internal
 */
final class SiteControllerTest extends ApplicationTestCase
{
    private SiteFinderInterface $finder;
    private SiteRepositoryInterface $repository;

    private static CompanyId $companyId;

    /**
     * @throws CompanyRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::$companyId = parent::createCompany();
    }

    /**
     * @throws ServiceNotFoundException
     * @throws ServiceCircularReferenceException
     * @throws LogicException
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /** @var SiteFinderInterface $finder */
        $finder = self::getContainer()->get(SiteFinderInterface::class);
        $this->finder = $finder;

        /** @var SiteRepositoryInterface $repository */
        $repository = self::getContainer()->get(SiteRepositoryInterface::class);
        $this->repository = $repository;
    }

    /**
     * @throws SiteFinderException
     * @throws SiteRepositoryException
     * @throws RouteNotFoundException
     * @throws InvalidParameterException
     * @throws MissingMandatoryParametersException
     * @throws InvalidArgumentException
     */
    #[Test]
    public function testIndex(): void
    {
        $this->client->request(
            'GET',
            $this->router->generate('site.index')
        );

        self::assertResponseIsSuccessful();
    }

    /**
     * @throws SiteFinderException
     * @throws SiteRepositoryException
     * @throws RouteNotFoundException
     * @throws InvalidParameterException
     * @throws MissingMandatoryParametersException
     * @throws InvalidArgumentException
     */
    #[Test]
    public function testCreate(): void
    {
        $testName = 'Create Test Site';
        $this->checkForm(
            'site.create',
            [],
            'create_site_form',
            [
                'create_site_form[name]' => $testName,
                'create_site_form[company]' => (string) self::$companyId,
                'create_site_form[description]' => 'Test Site',
                'create_site_form[address][line1]' => 'Somewhere over the rainbow',
            ]
        );
        self::assertResponseRedirects();

        $sites = $this->finder->allForCompany(CompanyId::fromString(self::$companyId));
        $site = array_shift($sites);
        if (is_null($site)) {
            throw new ExpectationFailedException('No site created');
        }
        self::assertEquals($testName, $site->name);
    }

    /**
     * @throws SiteFinderException
     * @throws SiteRepositoryException
     * @throws RouteNotFoundException
     * @throws InvalidParameterException
     * @throws MissingMandatoryParametersException
     * @throws InvalidArgumentException
     */
    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test Site';
        $originalDescription = 'a description';
        $site = new SiteEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            companyId: CompanyId::fromString(self::$companyId)
        );
        $this->repository->store($site);

        $newName = 'Update Test Site Again';
        $newDescription = 'Changed';

        $this->checkForm(
            'site.update',
            ['id' => $id],
            'update_site_form',
            [
                'update_site_form[name]' => $newName,
                'update_site_form[description]' => $newDescription,
            ],
            [
                'update_site_form[name]' => $originalName,
                'update_site_form[description]' => $originalDescription,
            ]
        );
        self::assertResponseRedirects();

        $site = $this->finder->findById($id);
        self::assertEquals($newName, $site->name);
        self::assertEquals($newDescription, $site->description);
    }
}
