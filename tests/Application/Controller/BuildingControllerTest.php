<?php

namespace App\Tests\Application\Controller;

use App\Application\Building\BuildingFinderInterface;
use App\Application\Common\Exception\AbstractFinderException;
use App\Domain\Building\BuildingEntity;
use App\Domain\Building\BuildingRepositoryException;
use App\Domain\Building\BuildingRepositoryInterface;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Site\SiteRepositoryException;
use App\Domain\Site\ValueObject\SiteId;
use App\Tests\Application\ApplicationTestCase;
use PHPUnit\Framework\Attributes\Test;

/**
 * @internal
 */
final class BuildingControllerTest extends ApplicationTestCase
{
    private BuildingFinderInterface $finder;
    private BuildingRepositoryInterface $repository;

    private static SiteId $siteId;

    /**
     * @throws CompanyRepositoryException
     * @throws SiteRepositoryException
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::$siteId = self::createSite();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->finder = $this->getContainer()->get(BuildingFinderInterface::class);
        $this->repository = $this->getContainer()->get(BuildingRepositoryInterface::class);
    }

    #[Test]
    public function testIndex(): void
    {
        $this->client->request(
            'GET',
            $this->router->generate('building.index')
        );

        $this->assertResponseIsSuccessful();
    }

    /**
     * @throws AbstractFinderException
     */
    #[Test]
    public function testCreate(): void
    {
        $testName = 'Create Test Building';
        $this->checkForm(
            $this->router->generate('building.create'),
            'create_building_form',
            [
                'create_building_form[name]' => $testName,
                'create_building_form[site]' => (string) self::$siteId,
                'create_building_form[description]' => 'Test Building',
                'create_building_form[address][line1]' => 'Somewhere over the rainbow',
            ]
        );
        $this->assertResponseRedirects();

        $buildings = $this->finder->allForSite(SiteId::fromString(self::$siteId));
        $building = array_shift($buildings);
        $this->assertEquals($testName, $building->name);
    }

    /**
     * @throws AbstractFinderException
     * @throws BuildingRepositoryException
     */
    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test Building';
        $originalDescription = 'a description';
        $building = new BuildingEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            siteId: SiteId::fromString(self::$siteId)
        );
        $this->repository->store($building);

        $newName = 'Update Test Building Again';
        $newDescription = 'Changed';

        $this->checkForm(
            $this->router->generate('building.update', ['id' => $id]),
            'update_building_form',
            [
                'update_building_form[name]' => $newName,
                'update_building_form[description]' => $newDescription,
            ],
            [
                'update_building_form[name]' => $originalName,
                'update_building_form[description]' => $originalDescription,
            ]
        );
        $this->assertResponseRedirects();

        $building = $this->finder->findById($id);
        $this->assertEquals($newName, $building->name);
        $this->assertEquals($newDescription, $building->description);
    }
}
