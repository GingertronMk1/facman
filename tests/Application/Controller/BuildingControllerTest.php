<?php

namespace App\Tests\Application\Controller;

use App\Application\Building\BuildingFinderInterface;
use App\Application\Building\BuildingModel;
use App\Application\Common\Exception\AbstractFinderException;
use App\Domain\Building\BuildingEntity;
use App\Domain\Building\BuildingRepositoryException;
use App\Domain\Building\BuildingRepositoryInterface;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Site\SiteRepositoryException;
use App\Domain\Site\ValueObject\SiteId;
use App\Tests\Application\ApplicationTestCase;
use InvalidArgumentException;
use LogicException;
use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\Routing\Exception\InvalidParameterException;
use Symfony\Component\Routing\Exception\MissingMandatoryParametersException;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use TypeError;

/**
 * @internal
 */
final class BuildingControllerTest extends ApplicationTestCase
{
    private BuildingFinderInterface $finder;
    private BuildingRepositoryInterface $repository;

    private static SiteId $siteId;

    /**
     * @throws CompanyRepositoryException
     * @throws SiteRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::$siteId = self::createSite();
    }

    /**
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     * @throws TypeError
     * @throws LogicException
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /** @var BuildingFinderInterface $finder */
        $finder = self::getContainer()->get(BuildingFinderInterface::class);
        $this->finder = $finder;

        /** @var BuildingRepositoryInterface $repository */
        $repository = self::getContainer()->get(BuildingRepositoryInterface::class);
        $this->repository = $repository;
    }

    /**
     * @throws InvalidParameterException
     * @throws MissingMandatoryParametersException
     * @throws RouteNotFoundException
     */
    public function testIndex(): void
    {
        $this->client->request(
            'GET',
            $this->router->generate('building.index')
        );

        self::assertResponseIsSuccessful();
    }

    /**
     * @throws AbstractFinderException
     * @throws InvalidArgumentException
     */
    public function testCreate(): void
    {
        $testName = 'Create Test Building';
        $this->checkForm(
            'building.create',
            [],
            'create_building_form',
            [
                'create_building_form[name]' => self::class,
                'create_building_form[site]' => (string) self::$siteId,
                'create_building_form[description]' => 'Test Building',
                'create_building_form[address][line1]' => 'Somewhere over the rainbow',
            ]
        );
        self::assertResponseRedirects();

        $buildings = $this->finder->allForSite(SiteId::fromString(self::$siteId));
        self::assertContains(
            self::class,
            array_map(
                fn (BuildingModel $buildingModel) => $buildingModel->name,
                $buildings
            )
        );
    }

    /**
     * @throws AbstractFinderException
     * @throws BuildingRepositoryException
     * @throws InvalidArgumentException
     */
    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test Building';
        $originalDescription = 'a description';
        $building = new BuildingEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            siteId: SiteId::fromString(self::$siteId)
        );
        $this->repository->store($building);

        $newName = 'Update Test Building Again';
        $newDescription = 'Changed';

        $this->checkForm(
            'building.update',
            ['id' => $id],
            'update_building_form',
            [
                'update_building_form[name]' => $newName,
                'update_building_form[description]' => $newDescription,
            ],
            [
                'update_building_form[name]' => $originalName,
                'update_building_form[description]' => $originalDescription,
            ]
        );
        self::assertResponseRedirects();

        $building = $this->finder->findById($id);
        self::assertEquals($newName, $building->name);
        self::assertEquals($newDescription, $building->description);
    }
}
