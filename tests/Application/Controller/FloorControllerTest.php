<?php

namespace App\Tests\Application\Controller;

use App\Application\Common\Exception\AbstractFinderException;
use App\Application\Floor\FloorFinderInterface;
use App\Application\Floor\FloorModel;
use App\Domain\Building\BuildingRepositoryException;
use App\Domain\Building\ValueObject\BuildingId;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Floor\FloorEntity;
use App\Domain\Floor\FloorRepositoryException;
use App\Domain\Floor\FloorRepositoryInterface;
use App\Domain\Site\SiteRepositoryException;
use App\Tests\Application\ApplicationTestCase;
use InvalidArgumentException;
use LogicException;
use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\Routing\Exception\InvalidParameterException;
use Symfony\Component\Routing\Exception\MissingMandatoryParametersException;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use TypeError;

/**
 * @internal
 */
final class FloorControllerTest extends ApplicationTestCase
{
    private FloorFinderInterface $finder;
    private FloorRepositoryInterface $repository;

    private static BuildingId $buildingId;

    /**
     * @throws CompanyRepositoryException
     * @throws BuildingRepositoryException
     * @throws SiteRepositoryException
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::$buildingId = self::createBuilding();
    }

    /**
     * @throws ServiceCircularReferenceException
     * @throws ServiceNotFoundException
     * @throws TypeError
     * @throws LogicException
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        /** @var FloorFinderInterface $finder */
        $finder = self::getContainer()->get(FloorFinderInterface::class);
        $this->finder = $finder;

        /** @var FloorRepositoryInterface $repository */
        $repository = self::getContainer()->get(FloorRepositoryInterface::class);
        $this->repository = $repository;
    }

    /**
     * @throws InvalidParameterException
     * @throws MissingMandatoryParametersException
     * @throws RouteNotFoundException
     */
    public function testIndex(): void
    {
        $this->client->request(
            'GET',
            $this->router->generate('floor.index')
        );

        self::assertResponseIsSuccessful();
    }

    /**
     * @throws AbstractFinderException
     * @throws InvalidArgumentException
     */
    public function testCreate(): void
    {
        $this->checkForm(
            'floor.create',
            [],
            'create_floor_form',
            [
                'create_floor_form[name]' => self::class,
                'create_floor_form[building]' => (string) self::$buildingId,
                'create_floor_form[description]' => 'Test Floor',
            ]
        );
        self::assertResponseRedirects();

        $floors = $this->finder->allForBuilding(BuildingId::fromString(self::$buildingId));
        self::assertContains(
            self::class,
            array_map(
                fn (FloorModel $floor) => $floor->name,
                $floors
            )
        );
    }

    /**
     * @throws AbstractFinderException
     * @throws FloorRepositoryException
     * @throws InvalidArgumentException
     */
    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test Floor';
        $originalDescription = 'a description';
        $floor = new FloorEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            buildingId: BuildingId::fromString(self::$buildingId)
        );
        $this->repository->store($floor);

        $newName = 'Update Test Floor Again';
        $newDescription = 'Changed';

        $this->checkForm(
            'floor.update',
            ['id' => $id],
            'update_floor_form',
            [
                'update_floor_form[name]' => $newName,
                'update_floor_form[description]' => $newDescription,
            ],
            [
                'update_floor_form[name]' => $originalName,
                'update_floor_form[description]' => $originalDescription,
            ]
        );
        self::assertResponseRedirects();

        $floor = $this->finder->findById($id);
        self::assertEquals($newName, $floor->name);
        self::assertEquals($newDescription, $floor->description);
    }
}
