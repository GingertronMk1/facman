<?php

namespace App\Tests\Application\Controller;

use App\Application\Common\Exception\AbstractFinderException;
use App\Application\Floor\FloorFinderInterface;
use App\Domain\Building\BuildingRepositoryException;
use App\Domain\Building\ValueObject\BuildingId;
use App\Domain\Company\CompanyRepositoryException;
use App\Domain\Floor\FloorEntity;
use App\Domain\Floor\FloorRepositoryException;
use App\Domain\Floor\FloorRepositoryInterface;
use App\Domain\Site\SiteRepositoryException;
use App\Tests\Application\ApplicationTestCase;
use PHPUnit\Framework\Attributes\Test;

/**
 * @internal
 */
final class FloorControllerTest extends ApplicationTestCase
{
    private FloorFinderInterface $finder;
    private FloorRepositoryInterface $repository;

    private static BuildingId $buildingId;

    /**
     * @throws CompanyRepositoryException
     * @throws BuildingRepositoryException|SiteRepositoryException
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::$buildingId = self::createBuilding();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->finder = $this->getContainer()->get(FloorFinderInterface::class);
        $this->repository = $this->getContainer()->get(FloorRepositoryInterface::class);
    }

    #[Test]
    public function testIndex(): void
    {
        $this->client->request(
            'GET',
            $this->router->generate('floor.index')
        );

        $this->assertResponseIsSuccessful();
    }

    /**
     * @throws AbstractFinderException
     */
    #[Test]
    public function testCreate(): void
    {
        $testName = 'Create Test Floor';
        $this->checkForm(
            $this->router->generate('floor.create'),
            'create_floor_form',
            [
                'create_floor_form[name]' => $testName,
                'create_floor_form[building]' => (string) self::$buildingId,
                'create_floor_form[description]' => 'Test Floor',
            ]
        );
        $this->assertResponseRedirects();

        $floors = $this->finder->allForBuilding(BuildingId::fromString(self::$buildingId));
        $floor = array_shift($floors);
        $this->assertEquals($testName, $floor->name);
    }

    /**
     * @throws AbstractFinderException
     * @throws FloorRepositoryException
     */
    public function testUpdate(): void
    {
        $id = $this->repository->generateId();
        $originalName = 'Update Test Floor';
        $originalDescription = 'a description';
        $floor = new FloorEntity(
            id: $id,
            name: $originalName,
            description: $originalDescription,
            buildingId: BuildingId::fromString(self::$buildingId)
        );
        $this->repository->store($floor);

        $newName = 'Update Test Floor Again';
        $newDescription = 'Changed';

        $this->checkForm(
            $this->router->generate('floor.update', ['id' => $id]),
            'update_floor_form',
            [
                'update_floor_form[name]' => $newName,
                'update_floor_form[description]' => $newDescription,
            ],
            [
                'update_floor_form[name]' => $originalName,
                'update_floor_form[description]' => $originalDescription,
            ]
        );
        $this->assertResponseRedirects();

        $floor = $this->finder->findById($id);
        $this->assertEquals($newName, $floor->name);
        $this->assertEquals($newDescription, $floor->description);
    }
}
